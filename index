```html
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cierre de Caja - Gasolinera</title>
    <!-- <link rel="stylesheet" href="styles.css"> <-- Eliminado enlace externo -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <style>
        /* styles.css */
        :root {
            --primary-color: #1e2a38;
            --secondary-color: #2c3e50;
            --accent-color: #3498db;
            --text-color: #ecf0f1;
            --danger-color: #e74c3c;
            --success-color: #2ecc71;
            --warning-color: #f39c12;
            --border-color: #34495e;
            --input-bg: #283747;
            --modal-bg: #1e2a38;
            --hover-color: #3e546a;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background-color: #121921;
            color: var(--text-color);
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px 0;
            border-bottom: 2px solid var(--border-color);
        }

        header h1 {
            font-size: 2.2rem;
            color: var(--accent-color);
        }

        /* Logo en el header */
        .header-content {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
        }

        .logo {
            max-height: 50px; /* Ajusta la altura según necesites */
            width: auto;
        }


        /* Paneles */
        .panel {
            background-color: var(--primary-color);
            border-radius: 8px;
            margin-bottom: 30px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            overflow: hidden;
        }

        .panel-header {
            background-color: var(--secondary-color);
            padding: 15px 20px;
            border-bottom: 1px solid var(--border-color);
            display: flex; /* Para alinear icono y texto */
            align-items: center; /* Para alinear icono y texto */
            gap: 10px; /* Espacio entre icono y texto */
        }

        .panel-header h2 {
            font-size: 1.5rem;
            color: var(--accent-color);
            margin: 0; /* Resetea margen si h2 tiene uno por defecto */
        }

        .panel-header h2 i {
            margin-right: 8px; /* Espacio entre el icono y el texto del título */
        }


        .panel-content {
            padding: 20px;
        }

        /* Panel 1: Información General */
        .info-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }

        .date-time-container {
            display: flex;
            gap: 30px; /* Aumentar espacio entre fecha, hora y turno */
            flex-wrap: wrap;
            align-items: center; /* Alinear verticalmente */
        }

        /* Estilos para los contenedores individuales de fecha, hora y turno */
        .date-container, .time-container, .shift-container {
            display: flex;
            align-items: center; /* Alinear icono y texto */
            gap: 8px; /* Espacio entre icono y texto/valor */
        }


        .date-container label, .time-container label, .shift-container label {
            font-weight: 500;
            color: var(--accent-color);
            margin: 0; /* Quitar margen si existe */
        }

        .date-container i, .time-container i, .shift-container i {
            color: var(--accent-color); /* Asegurar color del icono */
            font-size: 1.1em; /* Tamaño del icono ligeramente más grande */
        }

        /* Estilos para los valores de fecha, hora y turno */
        #current-date, #current-time, #current-shift {
            font-weight: bold; /* Hacer el valor más visible */
            color: var(--text-color); /* Color del texto normal */
        }


        .playero-container {
            display: flex;
            align-items: center; /* Alinear icono, label y select */
            gap: 8px;
            min-width: 250px; /* Un poco más de ancho si es necesario */
        }

        .playero-container label {
            font-weight: 500;
            color: var(--accent-color);
            margin: 0; /* Quitar margen si existe */
            white-space: nowrap; /* Evitar que el label se rompa */
        }

        .playero-container i {
            color: var(--accent-color);
            font-size: 1.1em;
        }


        select, input[type="number"], input[type="text"] { /* Aplicar a text también */
            background-color: var(--input-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            padding: 10px;
            border-radius: 4px;
            font-size: 1rem;
            font-family: 'Roboto', sans-serif; /* Asegurar la fuente */
        }

        input[type="number"] {
            -moz-appearance: textfield; /* Firefox */
        }
        input[type="number"]::-webkit-outer-spin-button,
        input[type="number"]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0; /* Safari and Chrome */
        }


        select {
            min-width: 150px; /* Ancho mínimo para el select */
        }


        select:focus, input:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 5px rgba(52, 152, 219, 0.5); /* Sutil resplandor al enfocar */
        }


        input[readonly] {
            background-color: var(--secondary-color); /* Fondo diferente para readonly */
            cursor: not-allowed; /* Cursor indicando no editable */
        }


        /* Panel 2: Tablas de Combustibles */
        .tables-container {
            display: flex;
            flex-direction: column;
            gap: 30px;
        }

        .fuel-table-container {
            width: 100%;
        }

        .fuel-table-container h3 {
            margin-bottom: 15px;
            color: var(--accent-color);
            display: flex; /* Para alinear icono */
            align-items: center; /* Para alinear icono */
            gap: 8px; /* Espacio icono-texto */
        }

        .fuel-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            table-layout: fixed; /* Para que las columnas respeten el ancho */
        }


        .fuel-table th, .fuel-table td {
            padding: 12px 10px; /* Ajustar padding */
            text-align: left;
            border-bottom: 1px solid var(--border-color);
            vertical-align: middle; /* Alinear contenido verticalmente */
        }

        /* Anchos específicos para columnas */
        .fuel-table th:nth-child(1), .fuel-table td:nth-child(1) { width: 25%; } /* Combustible */
        .fuel-table th:nth-child(2), .fuel-table td:nth-child(2) { width: 15%; } /* Inicio */
        .fuel-table th:nth-child(3), .fuel-table td:nth-child(3) { width: 15%; } /* Final */
        .fuel-table th:nth-child(4), .fuel-table td:nth-child(4) { width: 15%; } /* Litro */
        .fuel-table th:nth-child(5), .fuel-table td:nth-child(5) { width: 15%; } /* Precio */
        .fuel-table th:nth-child(6), .fuel-table td:nth-child(6) { width: 15%; } /* Precio Total */


        .fuel-table th {
            background-color: var(--secondary-color);
            font-weight: 500;
            white-space: nowrap; /* Evitar que el texto del header se rompa */
        }

        .fuel-table input {
            width: 100%;
            padding: 8px;
            font-size: 0.95rem; /* Ligeramente más pequeño si es necesario */
        }

        /* Alinear números a la derecha en inputs */
        .fuel-table input[type="number"] {
            text-align: right;
        }


        /* Estilos específicos para inputs readonly en la tabla */
        .fuel-table input.litro,
        .fuel-table input.precio-unitario,
        .fuel-table input.precio-total {
            background-color: var(--secondary-color); /* Fondo diferente */
            border: 1px solid var(--border-color); /* Mantener borde sutil */
            font-weight: bold; /* Resaltar valores calculados */
        }

        /* Hover en filas de la tabla */
        .fuel-table tbody tr:hover {
            background-color: var(--hover-color);
        }


        .total-container {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            gap: 15px;
            margin: 20px 0;
            font-size: 1.2rem;
            padding: 10px;
            background-color: var(--secondary-color);
            border-radius: 4px;
        }


        .total-label {
            font-weight: 500;
        }

        .total-value {
            font-weight: 700;
            color: var(--accent-color);
            min-width: 100px; /* Espacio mínimo para el valor */
            text-align: right;
        }


        .buttons-container {
            display: flex;
            justify-content: center;
            flex-wrap: wrap; /* Permitir que los botones pasen a la línea siguiente en pantallas pequeñas */
            gap: 20px;
            margin-top: 20px;
        }

        .action-btn {
            background-color: var(--accent-color);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 4px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.1s;
            display: inline-flex; /* Para alinear icono y texto */
            align-items: center;
            gap: 8px; /* Espacio entre icono y texto */
        }

        .action-btn:hover {
            background-color: #2980b9;
            transform: translateY(-2px); /* Efecto ligero al pasar el ratón */
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .action-btn:active {
            transform: translateY(0); /* Quitar efecto al hacer clic */
        }


        #borrar-btn {
            background-color: var(--danger-color);
        }

        #borrar-btn:hover {
            background-color: #c0392b;
        }

        #calcular-btn {
            background-color: var(--success-color);
        }

        #calcular-btn:hover {
            background-color: #27ae60;
        }

        #registrar-btn {
            background-color: var(--warning-color); /* Color diferente para registrar */
            color: var(--primary-color); /* Texto oscuro para contraste */
        }

        #registrar-btn:hover {
            background-color: #e67e22;
        }

        /* Panel 3: Columnas */
        .efectivo-container {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 30px;
            background-color: var(--secondary-color); /* Fondo para destacar */
            padding: 15px;
            border-radius: 6px;
        }

        .efectivo-container label {
            font-weight: 500;
            font-size: 1.1rem;
            color: var(--accent-color);
            min-width: 100px;
            display: flex; /* Alinear icono y texto */
            align-items: center;
            gap: 8px;
        }

        .efectivo-container input {
            flex-grow: 1; /* Permitir que crezca */
            max-width: 250px; /* Limitar ancho máximo */
            text-align: right; /* Alinear monto a la derecha */
            font-weight: bold;
            font-size: 1.1rem;
        }


        .columns-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); /* Ajustar minmax */
            gap: 20px;
        }

        .column {
            background-color: var(--secondary-color);
            border-radius: 6px;
            padding: 15px;
            display: flex;
            flex-direction: column;
            /* height: 100%; No forzar altura igual */
        }

        .column h3 {
            margin-bottom: 15px;
            text-align: center;
            color: var(--accent-color);
            font-size: 1.2rem;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 10px;
        }


        .column-buttons {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
        }

        .add-btn, .remove-btn {
            padding: 8px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 5px;
            font-size: 0.9rem;
            transition: background-color 0.3s;
        }


        .add-btn {
            background-color: var(--success-color);
            color: white;
        }

        .add-btn:hover {
            background-color: #27ae60;
        }

        .remove-btn {
            background-color: var(--danger-color);
            color: white;
        }

        .remove-btn:hover {
            background-color: #c0392b;
        }

        .column-content {
            flex-grow: 1; /* Permitir que crezca */
            min-height: 150px; /* Reducir altura mínima si es necesario */
            max-height: 300px; /* Altura máxima con scroll */
            background-color: var(--input-bg);
            border-radius: 4px;
            padding: 10px;
            margin-bottom: 15px;
            overflow-y: auto;
            border: 1px solid var(--border-color); /* Borde sutil */
        }

        /* Scrollbar styling (opcional) */
        .column-content::-webkit-scrollbar {
            width: 8px;
        }
        .column-content::-webkit-scrollbar-track {
            background: var(--secondary-color);
            border-radius: 4px;
        }
        .column-content::-webkit-scrollbar-thumb {
            background-color: var(--accent-color);
            border-radius: 4px;
            border: 2px solid var(--secondary-color);
        }


        .column-total {
            display: flex;
            justify-content: space-between;
            font-weight: 500;
            padding: 10px 5px; /* Ajustar padding */
            border-top: 1px solid var(--border-color);
            margin-top: auto; /* Empujar al fondo */
        }

        .column-total span:first-child {
            color: var(--text-color); /* Color normal para "Total:" */
        }

        .column-total span:last-child {
            color: var(--accent-color);
            font-weight: bold; /* Resaltar el monto total */
        }


        /* Panel 4: Totales y Opciones */
        .totals-container {
            display: flex;
            flex-direction: column;
            gap: 10px; /* Reducir espacio */
            margin-bottom: 30px;
        }

        .total-item {
            display: flex;
            justify-content: space-between;
            align-items: center; /* Alinear verticalmente */
            padding: 12px 15px;
            background-color: var(--secondary-color);
            border-radius: 4px;
            font-size: 1.1rem;
            border-left: 4px solid var(--accent-color); /* Indicador visual */
        }

        .total-item .total-label {
            font-weight: 500;
            color: var(--text-color);
        }

        .total-item .total-value {
            font-weight: bold;
            font-size: 1.2rem; /* Ligeramente más grande */
            color: var(--accent-color);
        }

        /* Estilo específico para la diferencia */
        #diferencia {
            padding: 5px 10px;
            border-radius: 4px;
        }

        #diferencia[data-positive="true"] { /* Añadir atributo en JS si es positivo */
            color: var(--success-color);
            border: 1px solid var(--success-color);
            background-color: rgba(46, 204, 113, 0.1);
        }

        #diferencia[data-negative="true"] { /* Añadir atributo en JS si es negativo */
            color: var(--danger-color);
            border: 1px solid var(--danger-color);
            background-color: rgba(231, 76, 60, 0.1);
        }


        .options-container {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px; /* Espacio antes de las opciones */
            padding-top: 20px; /* Espacio arriba de los botones */
            border-top: 1px solid var(--border-color); /* Separador visual */
        }

        #imprimir-btn {
            background-color: #8e44ad; /* Morado para imprimir */
        }
        #imprimir-btn:hover {
            background-color: #732d91;
        }

        #config-btn {
            background-color: #7f8c8d; /* Gris para config */
        }
        #config-btn:hover {
            background-color: #6c7a7d;
        }

        .notas-section {
            margin-top: 30px;
            text-align: left;
            background-color: var(--secondary-color); /* Fondo para destacar */
            padding: 15px;
            border-radius: 6px;
        }


        .notas-section h3 {
            margin-bottom: 15px; /* Más espacio debajo del título */
            color: var(--accent-color);
            padding-bottom: 5px;
            border-bottom: 1px solid var(--border-color);
        }


        .notas-lines {
            display: flex;
            flex-direction: column;
            gap: 10px; /* Espacio entre líneas */
        }

        .nota-line {
            border-bottom: 1px dashed var(--border-color); /* Línea punteada */
            height: 25px; /* Altura de la línea */
        }


        /* Modales */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8); /* Más oscuro */
            overflow: auto;
            animation: fadeIn 0.3s ease-out; /* Animación al abrir */
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }


        .modal-content {
            background-color: var(--modal-bg);
            margin: 8% auto; /* Ajustar margen superior */
            padding: 25px 30px; /* Más padding horizontal */
            border-radius: 8px;
            width: 90%; /* Más ancho en pantallas pequeñas */
            max-width: 550px; /* Ancho máximo */
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5); /* Sombra más pronunciada */
            position: relative;
            animation: slideIn 0.3s ease-out; /* Animación del contenido */
        }


        @keyframes slideIn {
            from { transform: translateY(-30px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }


        .config-modal-content, .print-modal-content {
            max-width: 850px; /* Más ancho para config e impresión */
            width: 90%;
        }

        .close {
            position: absolute;
            right: 15px; /* Más cerca del borde */
            top: 10px; /* Más cerca del borde */
            font-size: 24px; /* Ligeramente más pequeño */
            font-weight: bold;
            color: var(--text-color);
            cursor: pointer;
            padding: 5px; /* Área de clic más grande */
            line-height: 1;
            transition: color 0.3s, transform 0.2s;
        }

        .close:hover {
            color: var(--danger-color); /* Rojo al pasar el ratón */
            transform: rotate(90deg); /* Efecto de giro */
        }


        .modal h2 {
            margin-top: 0; /* Quitar margen superior */
            margin-bottom: 25px; /* Más espacio debajo */
            color: var(--accent-color);
            padding-bottom: 15px; /* Más padding */
            border-bottom: 1px solid var(--border-color);
            text-align: center; /* Centrar título del modal */
            font-size: 1.6rem;
        }


        .form-group {
            margin-bottom: 20px; /* Más espacio entre grupos */
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--accent-color); /* Color del label */
        }

        /* Mejorar inputs y selects dentro de modales */
        .modal .form-group select,
        .modal .form-group input[type="number"],
        .modal .form-group input[type="text"] {
            width: 100%; /* Ocupar todo el ancho */
        }


        .confirm-btn {
            background-color: var(--accent-color);
            color: white;
            border: none;
            padding: 12px 20px; /* Más padding vertical */
            border-radius: 4px;
            font-size: 1.1rem; /* Texto más grande */
            font-weight: 500;
            cursor: pointer;
            margin-top: 20px; /* Más espacio arriba */
            width: 100%;
            transition: background-color 0.3s;
        }


        .confirm-btn:hover {
            background-color: #2980b9;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }


        /* Configuración */
        .config-warning {
            background-color: var(--warning-color);
            color: #fff;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 25px; /* Más espacio */
            text-align: center;
            border-left: 5px solid var(--danger-color);
        }

        .config-warning p {
            margin: 0 0 10px 0;
            font-weight: 500;
        }


        .warning-btn {
            background-color: var(--danger-color);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            margin-top: 10px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.3s;
        }


        .warning-btn:hover {
            background-color: #c0392b;
        }

        .config-sections {
            /* display: flex; */ /* Quitar flex si no es necesario */
            flex-direction: column;
            gap: 25px; /* Más espacio entre secciones */
            margin-top: 20px; /* Espacio después de la advertencia */
        }

        .config-section {
            background-color: var(--secondary-color);
            border-radius: 6px;
            padding: 20px; /* Más padding */
            border: 1px solid var(--border-color); /* Borde sutil */
        }

        .config-section h3 {
            margin-top: 0;
            margin-bottom: 20px; /* Más espacio */
            color: var(--accent-color);
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border-color);
        }

        .config-form {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); /* Ajustar minmax */
            gap: 20px; /* Espacio entre campos */
        }

        /* Estilo específico para el botón de añadir aceite en config */
        #add-aceite-config-btn {
            grid-column: 1 / -1; /* Ocupar toda la fila */
            margin-top: 10px;
            background-color: var(--success-color);
            color: white;
            justify-content: center; /* Centrar contenido del botón */
        }
        #add-aceite-config-btn:hover {
            background-color: #27ae60;
        }

        /* Estilos para los campos de aceite dinámicos */
        .config-section .form-group {
            display: flex;
            flex-wrap: wrap; /* Permitir que los elementos se envuelvan */
            align-items: center;
            gap: 10px;
            padding: 10px;
            background-color: var(--input-bg);
            border-radius: 4px;
        }

        .config-section .form-group label {
            margin-bottom: 0; /* Quitar margen inferior del label */
            flex-basis: 60px; /* Ancho base para labels */
            color: var(--text-color); /* Color normal para labels dentro del item */
        }

        .config-section .form-group input[type="text"],
        .config-section .form-group input[type="number"] {
            flex-grow: 1; /* Permitir que los inputs crezcan */
            min-width: 100px; /* Ancho mínimo */
        }

        .config-section .remove-aceite-config-btn {
            margin-left: auto; /* Empujar el botón quitar a la derecha */
            padding: 5px 8px;
            font-size: 0.8rem;
        }


        .playeros-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 20px; /* Más espacio */
            grid-column: 1 / -1; /* Ocupar todo el ancho en grid */
        }

        .playero-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: var(--input-bg);
            padding: 10px 15px;
            border-radius: 4px;
            border-left: 3px solid var(--accent-color);
        }

        .playero-item span {
            font-weight: 500;
        }


        .remove-playero-btn {
            background-color: var(--danger-color);
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: background-color 0.3s;
        }
        .remove-playero-btn:hover {
            background-color: #c0392b;
        }

        /* Grupo para añadir playero */
        .config-section .form-group #add-playero-btn {
            padding: 8px 15px; /* Ajustar padding */
            margin-left: 10px; /* Espacio respecto al input */
        }


        /* Items en columnas */
        .item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: var(--primary-color); /* Ligeramente diferente al fondo de la columna */
            padding: 8px 12px; /* Ajustar padding */
            border-radius: 4px;
            margin-bottom: 8px; /* Menos espacio entre items */
            border-left: 3px solid var(--accent-color); /* Indicador */
            transition: background-color 0.2s;
        }

        .item:hover {
            background-color: var(--hover-color);
        }


        .item-details {
            flex: 1;
            margin-right: 10px; /* Espacio antes del checkbox */
            font-size: 0.9rem; /* Tamaño de fuente del item */
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }


        .item-checkbox {
            margin-left: 10px;
            cursor: pointer;
            transform: scale(1.2); /* Hacer checkbox un poco más grande */
        }


        /*Estilos para la vista previa de impresión*/
        .print-modal-content {
            max-width: 900px;
            background-color: #f8f9fa; /* Fondo ligeramente gris para el modal */
        }

        .print-content {
            background-color: white;
            color: #333;
            padding: 30px;
            border-radius: 4px;
            margin-bottom: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1); /* Sombra suave */
            border: 1px solid #ccc; /* Borde sutil */
            min-height: 70vh; /* Altura mínima para ver el contenido */
            overflow-y: auto; /* Scroll si el contenido es muy largo */
        }

        /* Ajustes generales dentro de print-content para la vista previa */
        .print-content h1,
        .print-content h2,
        .print-content h3 {
            color: #2c3e50;
            margin-bottom: 15px;
        }
        .print-content h1 { font-size: 1.8em; }
        .print-content h2 { font-size: 1.4em; }
        .print-content h3 { font-size: 1.1em; }

        .print-content table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0; /* Más margen vertical */
            font-size: 0.9rem; /* Tamaño base para tablas en vista previa */
        }
        .print-content th,
        .print-content td {
            border: 1px solid #ddd;
            padding: 8px 10px;
            text-align: left;
        }
        .print-content th {
            background-color: #e9ecef; /* Fondo gris claro para headers */
            font-weight: 600; /* Un poco más de peso */
        }
        .print-content tbody tr:nth-child(even) {
            background-color: #f8f9fa; /* Rayado suave */
        }

        .print-content ul {
            list-style-type: none;
            padding: 0;
            margin: 10px 0 15px 0;
        }
        .print-content li {
            margin-bottom: 5px;
            padding: 5px 0;
            border-bottom: 1px dotted #eee; /* Separador suave */
        }
        .print-content li:last-child {
            border-bottom: none;
        }

        .print-content .resumen-section,
        .print-content .summary-section /* Usar .summary-section si así se llama en JS */
        {
            margin-top: 30px;
            padding-top: 15px;
            border-top: 2px solid #34495e; /* Separador fuerte */
        }
        .print-content .total-item, /* Si se usa esta clase en la previa */
        .print-content .summary-section p,
        .print-content .print-summary span /* Si se usa esta clase en la previa */
        {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            font-size: 1rem;
            font-weight: 500;
        }
        .print-content .summary-section p strong,
        .print-content .print-summary strong {
            color: #2c3e50;
        }


        .print-content .notas-section {
            margin-top: 30px;
        }
        .print-content .notas-section h3 {
            margin-bottom: 10px;
        }
        .print-content .nota-line { /* Estilo para vista previa si es diferente */
            border-bottom: 1px dashed #ccc;
            height: 25px;
            margin-bottom: 5px;
        }

        /* Botones dentro del modal de impresión */
        .print-buttons {
            display: flex;
            justify-content: flex-end; /* Alinear botón a la derecha */
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid var(--border-color);
        }

        #print-btn { /* Estilo específico para el botón de imprimir final */
            width: auto; /* No ocupar todo el ancho */
            padding: 10px 30px;
            background-color: var(--success-color);
        }
        #print-btn:hover {
            background-color: #27ae60;
        }

        /* --- ESTILOS DE IMPRESIÓN --- */
        /* (SECCIÓN REEMPLAZADA SEGÚN TU SOLICITUD) */
        @media print {
            /* Ocultar todo excepto el contenido de la vista previa */
            body > *:not(#print-modal), /* Oculta hermanos directos del modal */
            #print-modal > *:not(.print-modal-content), /* Oculta elementos dentro del modal excepto el contenido */
            .modal-content > *:not(#print-content):not(.close), /* Oculta header/botones del modal de impresión */
            .close, /* Oculta el botón de cerrar */
            header, /* Oculta el header original de la página */
            footer:not(.print-footer), /* Oculta el footer original, pero no el generado para impresión */
            .action-btn, /* Oculta botones generales */
            .buttons-container,
            .options-container,
            .column-buttons,
            .item-checkbox, /* Oculta checkboxes en las listas */
            #config-btn,
            #borrar-btn,
            #calcular-btn,
            #registrar-btn,
            #imprimir-btn, /* Oculta el botón que disparó la impresión */
            .modal:not(#print-modal) /* Oculta otros modales */
            {
                display: none !important;
                visibility: hidden !important; /* Refuerzo para ocultar */
            }

            /* Asegurar que el contenido de impresión ocupe el espacio */
            body {
                margin: 0 !important;
                padding: 0 !important;
                background-color: #fff !important; /* Fondo blanco para impresión */
                -webkit-print-color-adjust: exact !important; /* Forzar impresión de fondos (si es necesario, como en th) */
                print-color-adjust: exact !important;
                font-size: 9pt !important; /* Tamaño de fuente base para impresión */
            }

            #print-modal {
                position: static !important; /* Quitar posicionamiento fijo */
                overflow: visible !important;
                background: none !important;
                width: 100% !important;
                height: auto !important;
                box-shadow: none !important;
                display: block !important; /* Asegurar que sea visible */
                page-break-before: auto;
                page-break-after: auto;
            }

            .modal-content, #print-content {
                margin: 0 !important;
                padding: 5mm !important; /* Margen de impresión pequeño */
                width: auto !important; /* Ancho automático basado en contenido */
                max-width: none !important;
                border: none !important;
                box-shadow: none !important;
                background: none !important;
                display: block !important; /* Asegurar que el contenido se muestre */
            }

            /* Forzar estilos embebidos (aunque !important debería bastar) */
            #print-content * {
                color: #000 !important;
                background-color: transparent !important;
                box-shadow: none !important;
                text-shadow: none !important;
            }
            #print-content .print-table th {
                 background-color: #f2f2f2 !important; /* Fondo claro para headers de tabla */
                 font-weight: bold !important;
            }
            #print-content .print-table th,
            #print-content .print-table td {
                 border: 1px solid #ccc !important; /* Borde delgado */
            }

            /* Evitar saltos de página inoportunos */
            .print-section, .print-table, .print-list li, .print-summary {
                page-break-inside: avoid !important;
            }
            h1, h2, h3 {
                page-break-after: avoid !important;
                page-break-before: auto !important; /* Evitar empezar página con título pequeño si es posible */
            }
            .print-table thead {
                display: table-header-group; /* Repetir encabezado de tabla si se divide */
            }
            .print-footer {
                 position: fixed; /* Intentar fijar el footer (puede no funcionar en todos los navegadores) */
                 bottom: 5mm; /* Posición desde abajo */
                 width: calc(100% - 10mm); /* Ancho menos los márgenes */
                 text-align: center;
                 font-size: 7pt !important;
                 color: #666 !important;
                 page-break-before: auto; /* Evitar que cause salto de página */
            }

            /* Ocultar elementos específicos de la interfaz que podrían colarse */
            .panel, .panel-header, .panel-content {
                background: none !important;
                border: none !important;
                box-shadow: none !important;
                padding: 0 !important;
                margin: 0 !important;
                overflow: visible !important;
            }
        }

        /* Estilo para el Textarea de Notas */
        #notas-textarea {
            width: 100%;
            padding: 10px;
            background-color: var(--input-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-family: 'Roboto', sans-serif;
            font-size: 0.95rem;
            margin-top: 10px; /* Espacio respecto al título 'Notas' */
            resize: vertical; /* Permitir redimensionar verticalmente */
            min-height: 80px; /* Altura mínima */
        }

        #notas-textarea:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 5px rgba(52, 152, 219, 0.5);
        }

        /* Estilos para la lista de Clientes en Configuración (similar a Playeros) */
        .clientes-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 20px;
            grid-column: 1 / -1;
        }

        .cliente-item { /* Puedes usar la misma clase .playero-item si prefieres */
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: var(--input-bg);
            padding: 10px 15px;
            border-radius: 4px;
            border-left: 3px solid var(--accent-color);
        }

        .cliente-item span {
            font-weight: 500;
        }

        .remove-cliente-btn { /* Puedes usar la misma clase .remove-playero-btn */
            background-color: var(--danger-color);
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: background-color 0.3s;
        }
        .remove-cliente-btn:hover {
            background-color: #c0392b;
        }

        /* Iconos para títulos de sección en configuración */
        .config-section h3 i {
            margin-right: 8px;
            color: var(--accent-color);
        }
        /* Iconos para títulos de columnas en panel 3 */
        .column h3 i {
           margin-right: 8px;
        }
    </style>

</head>
<body>
    <div class="container">
        <header>
            <div class="header-content">
                <!-- Asegúrate de que la ruta del logo sea correcta o usa un placeholder si no está -->
                <img src="logo.png" alt="Logo Gasolinera" class="logo" onerror="this.style.display='none'; this.onerror=null;">
                <h1><i class="fas fa-gas-pump"></i> Cierre de Caja - Gasolinera</h1>
            </div>
        </header>

        <main class="dashboard">

            <!-- Panel 1: Información General -->
            <section class="panel" id="panel1">
                <div class="panel-header">
                    <h2><i class="fas fa-info-circle"></i> Información General</h2>
                </div>
                <div class="panel-content">
                    <div class="info-container">
                        <div class="date-time-container">
                            <div class="date-container">
                                <label><i class="far fa-calendar-alt"></i> Fecha:</label>
                                <span id="current-date"></span>
                            </div>
                            <div class="time-container">
                                <label><i class="far fa-clock"></i> Hora:</label>
                                <span id="current-time"></span>
                            </div>
                            <div class="shift-container">
                                <label><i class="fas fa-sun"></i> Turno:</label>
                                <span id="current-shift"></span>
                            </div>
                        </div>
                        <div class="playero-container">
                            <label for="playero"><i class="fas fa-user"></i> Playero:</label>
                            <select id="playero" name="playero">
                                <option value="">Seleccionar playero</option>
                                <!-- Opciones se cargarán dinámicamente -->
                            </select>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Panel 2: Registro de Surtidores de Combustible -->
            <section class="panel" id="panel2">
                <div class="panel-header">
                    <h2><i class="fas fa-oil-can"></i> Registro de Combustibles</h2>
                </div>
                <div class="panel-content">
                    <div class="tables-container">
                        <!-- Tabla para Pico 1 -->
                        <div class="fuel-table-container">
                            <h3>Pico N° 1 <i class="fas fa-tachometer-alt"></i></h3>
                            <table class="fuel-table" id="pico1-table">
                                <thead>
                                    <tr>
                                        <th>Combustible</th>
                                        <th>N° Inicio</th>
                                        <th>N° Final</th>
                                        <th>Litro</th>
                                        <th>Precio</th>
                                        <th>Precio Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr data-fuel-type="FORMULA DIESEL">
                                        <td>FORMULA DIESEL</td>
                                        <td><input type="number" class="inicio" min="0"></td>
                                        <td><input type="number" class="final" min="0"></td>
                                        <td><input type="number" class="litro" readonly></td>
                                        <td><input type="number" class="precio-unitario" value="2000" readonly></td>
                                        <td><input type="number" class="precio-total" readonly></td>
                                    </tr>
                                    <tr data-fuel-type="NAFTA SUPER">
                                        <td>NAFTA SUPER</td>
                                        <td><input type="number" class="inicio" min="0"></td>
                                        <td><input type="number" class="final" min="0"></td>
                                        <td><input type="number" class="litro" readonly></td>
                                        <td><input type="number" class="precio-unitario" value="1500" readonly></td>
                                        <td><input type="number" class="precio-total" readonly></td>
                                    </tr>
                                    <tr data-fuel-type="FORMULA DIESEL">
                                        <td>FORMULA DIESEL</td>
                                        <td><input type="number" class="inicio" min="0"></td>
                                        <td><input type="number" class="final" min="0"></td>
                                        <td><input type="number" class="litro" readonly></td>
                                        <td><input type="number" class="precio-unitario" value="2000" readonly></td>
                                        <td><input type="number" class="precio-total" readonly></td>
                                    </tr>
                                    <tr data-fuel-type="NAFTA SUPER">
                                        <td>NAFTA SUPER</td>
                                        <td><input type="number" class="inicio" min="0"></td>
                                        <td><input type="number" class="final" min="0"></td>
                                        <td><input type="number" class="litro" readonly></td>
                                        <td><input type="number" class="precio-unitario" value="1500" readonly></td>
                                        <td><input type="number" class="precio-total" readonly></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>

                        <!-- Tabla para Pico 2 -->
                        <div class="fuel-table-container">
                            <h3>Pico N° 2 <i class="fas fa-tachometer-alt"></i></h3>
                            <table class="fuel-table" id="pico2-table">
                                <thead>
                                    <tr>
                                        <th>Combustible</th>
                                        <th>N° Inicio</th>
                                        <th>N° Final</th>
                                        <th>Litro</th>
                                        <th>Precio</th>
                                        <th>Precio Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr data-fuel-type="V-POWER DIESEL">
                                        <td>V-POWER DIESEL</td>
                                        <td><input type="number" class="inicio" min="0"></td>
                                        <td><input type="number" class="final" min="0"></td>
                                        <td><input type="number" class="litro" readonly></td>
                                        <td><input type="number" class="precio-unitario" value="3000" readonly></td>
                                        <td><input type="number" class="precio-total" readonly></td>
                                    </tr>
                                    <tr data-fuel-type="V-POWER NAFTA">
                                        <td>V-POWER NAFTA</td>
                                        <td><input type="number" class="inicio" min="0"></td>
                                        <td><input type="number" class="final" min="0"></td>
                                        <td><input type="number" class="litro" readonly></td>
                                        <td><input type="number" class="precio-unitario" value="2500" readonly></td>
                                        <td><input type="number" class="precio-total" readonly></td>
                                    </tr>
                                    <tr data-fuel-type="NAFTA SUPER">
                                        <td>NAFTA SUPER</td>
                                        <td><input type="number" class="inicio" min="0"></td>
                                        <td><input type="number" class="final" min="0"></td>
                                        <td><input type="number" class="litro" readonly></td>
                                        <td><input type="number" class="precio-unitario" value="1500" readonly></td>
                                        <td><input type="number" class="precio-total" readonly></td>
                                    </tr>
                                    <tr data-fuel-type="FORMULA DIESEL">
                                        <td>FORMULA DIESEL</td>
                                        <td><input type="number" class="inicio" min="0"></td>
                                        <td><input type="number" class="final" min="0"></td>
                                        <td><input type="number" class="litro" readonly></td>
                                        <td><input type="number" class="precio-unitario" value="2000" readonly></td>
                                        <td><input type="number" class="precio-total" readonly></td>
                                    </tr>
                                    <tr data-fuel-type="V-POWER DIESEL">
                                        <td>V-POWER DIESEL</td>
                                        <td><input type="number" class="inicio" min="0"></td>
                                        <td><input type="number" class="final" min="0"></td>
                                        <td><input type="number" class="litro" readonly></td>
                                        <td><input type="number" class="precio-unitario" value="3000" readonly></td>
                                        <td><input type="number" class="precio-total" readonly></td>
                                    </tr>
                                    <tr data-fuel-type="V-POWER NAFTA">
                                        <td>V-POWER NAFTA</td>
                                        <td><input type="number" class="inicio" min="0"></td>
                                        <td><input type="number" class="final" min="0"></td>
                                        <td><input type="number" class="litro" readonly></td>
                                        <td><input type="number" class="precio-unitario" value="2500" readonly></td>
                                        <td><input type="number" class="precio-total" readonly></td>
                                    </tr>
                                    <tr data-fuel-type="NAFTA SUPER">
                                        <td>NAFTA SUPER</td>
                                        <td><input type="number" class="inicio" min="0"></td>
                                        <td><input type="number" class="final" min="0"></td>
                                        <td><input type="number" class="litro" readonly></td>
                                        <td><input type="number" class="precio-unitario" value="1500" readonly></td>
                                        <td><input type="number" class="precio-total" readonly></td>
                                    </tr>
                                    <tr data-fuel-type="FORMULA DIESEL">
                                        <td>FORMULA DIESEL</td>
                                        <td><input type="number" class="inicio" min="0"></td>
                                        <td><input type="number" class="final" min="0"></td>
                                        <td><input type="number" class="litro" readonly></td>
                                        <td><input type="number" class="precio-unitario" value="2000" readonly></td>
                                        <td><input type="number" class="precio-total" readonly></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div class="total-container">
                        <div class="total-label">Total Combustibles:</div>
                        <div class="total-value" id="total-combustibles">$0</div>
                    </div>

                    <div class="buttons-container">
                        <button id="borrar-btn" class="action-btn"><i class="fas fa-trash"></i> BORRAR</button>
                        <button id="calcular-btn" class="action-btn"><i class="fas fa-calculator"></i> CALCULAR</button>
                        <button id="registrar-btn" class="action-btn"><i class="fas fa-save"></i> REGISTRAR</button>
                    </div>
                </div>
            </section>

            <!-- Panel 3: Registro de Caja -->
            <section class="panel" id="panel3">
                <div class="panel-header">
                    <h2><i class="fas fa-cash-register"></i> Registro de Caja</h2>
                </div>
                <div class="panel-content">
                    <!-- Efectivo -->
                    <div class="efectivo-container">
                        <label for="efectivo"><i class="fas fa-money-bill-wave"></i> EFECTIVO:</label>
                        <input type="number" id="efectivo" min="0" placeholder="Ingrese monto en efectivo">
                    </div>

                    <div class="columns-container">
                        <!-- Columna 1: Aceites y Lubricantes -->
                        <div class="column">
                            <h3><i class="fas fa-oil-can"></i> Aceites y Lubricantes</h3>
                            <div class="column-buttons">
                                <button class="add-btn" id="add-aceite-btn">Agregar <i class="fas fa-plus-circle"></i></button>
                                <button class="remove-btn" id="remove-aceite-btn">Quitar <i class="fas fa-minus-circle"></i></button>
                            </div>
                            <div class="column-content" id="aceites-list">
                                <!-- Los items se agregarán dinámicamente -->
                            </div>
                            <div class="column-total">
                                <span>Total:</span>
                                <span id="total-aceites">$0</span>
                            </div>
                        </div>

                        <!-- Columna 2: Vales y Cheques -->
                        <div class="column">
                            <h3><i class="fas fa-receipt"></i> Vales y Cheques</h3>
                            <div class="column-buttons">
                                <button class="add-btn" id="add-vale-btn">Agregar <i class="fas fa-plus-circle"></i></button>
                                <button class="remove-btn" id="remove-vale-btn">Quitar <i class="fas fa-minus-circle"></i></button>
                            </div>
                            <div class="column-content" id="vales-list">
                                <!-- Los items se agregarán dinámicamente -->
                            </div>
                            <div class="column-total">
                                <span>Total:</span>
                                <span id="total-vales">$0</span>
                            </div>
                        </div>

                        <!-- Columna 3: Tarjetas -->
                        <div class="column">
                            <h3><i class="fas fa-credit-card"></i> Tarjetas</h3>
                            <div class="column-buttons">
                                <button class="add-btn" id="add-tarjeta-btn">Agregar <i class="fas fa-plus-circle"></i></button>
                                <button class="remove-btn" id="remove-tarjeta-btn">Quitar <i class="fas fa-minus-circle"></i></button>
                            </div>
                            <div class="column-content" id="tarjetas-list">
                                <!-- Los items se agregarán dinámicamente -->
                            </div>
                            <div class="column-total">
                                <span>Total:</span>
                                <span id="total-tarjetas">$0</span>
                            </div>
                        </div>

                        <!-- Columna 4: Transferencias/Fiado/Otros -->
                        <div class="column">
                            <h3><i class="fas fa-exchange-alt"></i> Transf./Fiado/Otros</h3>
                            <div class="column-buttons">
                                <button class="add-btn" id="add-transferencia-btn">Agregar <i class="fas fa-plus-circle"></i></button>
                                <button class="remove-btn" id="remove-transferencia-btn">Quitar <i class="fas fa-minus-circle"></i></button>
                            </div>
                            <div class="column-content" id="transferencias-list">
                                <!-- Los items se agregarán dinámicamente -->
                            </div>
                            <div class="column-total">
                                <span>Total:</span>
                                <span id="total-transferencias">$0</span>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Panel 4: Total Caja y Funcionalidades Complementarias -->
            <section class="panel" id="panel4">
                <div class="panel-header">
                    <h2><i class="fas fa-chart-pie"></i> Resumen y Opciones</h2>
                </div>
                <div class="panel-content">
                    <div class="totals-container">
                        <div class="total-item">
                            <span class="total-label">TOTAL COMBUSTIBLES:</span>
                            <span class="total-value" id="total-combustibles-resumen">$0</span>
                        </div>
                        <div class="total-item">
                            <span class="total-label">TOTAL CAJA:</span>
                            <span class="total-value" id="total-caja">$0</span> <!-- MODIFICACIÓN 3: Este valor se actualizará en tiempo real por JS -->
                        </div>
                        <div class="total-item">
                            <span class="total-label">DIFERENCIA:</span>
                            <span class="total-value" id="diferencia">$0</span> <!-- MODIFICACIÓN 3: Este valor se actualizará en tiempo real por JS -->
                        </div>
                    </div>

                    <div class="options-container">
                        <button id="imprimir-btn" class="action-btn"><i class="fas fa-print"></i> IMPRIMIR</button>
                        <button id="config-btn" class="action-btn"><i class="fas fa-cog"></i> CONFIGURACIÓN</button>
                    </div>

                     <div class="notas-section">
                        <h3><i class="fas fa-pencil-alt"></i> Notas:</h3>
                        <!-- MODIFICACIÓN 2: Reemplazar las líneas por un textarea -->
                        <textarea id="notas-textarea" rows="5" placeholder="Escriba aquí las notas relevantes del turno..."></textarea>
                    </div>
                </div>
            </section>

        </main>

        <footer>
            <p>© 2024 Sistema de Gestión - Gasolinera</p>
        </footer>
    </div>

    <!-- Modales -->
    <!-- Modal para Aceites y Lubricantes -->
    <div id="aceite-modal" class="modal">
        <div class="modal-content">
            <span class="close">×</span>
            <h2>Agregar Aceite o Lubricante</h2>
            <div class="form-group">
                <label for="aceite-select">Producto:</label>
                <select id="aceite-select">
                    <option value="">Seleccionar producto</option>
                    <!-- Opciones se agregarán dinámicamente desde la configuración -->
                </select>
            </div>
            <button id="add-aceite-confirm" class="confirm-btn">Agregar</button>
        </div>
    </div>

    <!-- Modal para Vales y Cheques -->
    <div id="vale-modal" class="modal">
        <div class="modal-content">
            <span class="close">×</span>
            <h2>Agregar Vale o Cheque</h2>
            <div class="form-group">
                <label for="vale-nombre">Nombre Cliente:</label> <!-- Etiqueta actualizada -->
                <select id="vale-nombre">
                    <option value="">Seleccionar nombre</option>
                    <!-- MODIFICACIÓN 1: Opciones se cargarán desde la config/JS -->
                </select>
            </div>
            <div class="form-group">
                <label for="vale-combustible">Tipo de Combustible:</label>
                <select id="vale-combustible">
                    <option value="">Seleccionar combustible</option>
                    <option value="V-POWER DIESEL">V-POWER DIESEL</option>
                    <option value="V-POWER NAFTA">V-POWER NAFTA</option>
                    <option value="NAFTA SUPER">NAFTA SUPER</option>
                    <option value="FORMULA DIESEL">FORMULA DIESEL</option>
                </select>
            </div>
            <div class="form-group">
                <label for="vale-litro">Litro:</label>
                <input type="number" id="vale-litro" min="0">
            </div>
            <div class="form-group">
                <label for="vale-precio">Precio:</label>
                <input type="number" id="vale-precio" min="0">
            </div>
            <button id="add-vale-confirm" class="confirm-btn">Agregar</button>
        </div>
    </div>

    <!-- Modal para Tarjetas -->
    <div id="tarjeta-modal" class="modal">
        <div class="modal-content">
            <span class="close">×</span>
            <h2>Agregar Tarjeta</h2>
            <div class="form-group">
                <label for="tarjeta-monto">Monto:</label>
                <input type="number" id="tarjeta-monto" min="0">
            </div>
            <button id="add-tarjeta-confirm" class="confirm-btn">Agregar</button>
        </div>
    </div>

    <!-- Modal para Transferencias -->
    <div id="transferencia-modal" class="modal">
        <div class="modal-content">
            <span class="close">×</span>
            <h2>Agregar Transferencia/Fiado/Otro</h2>
            <div class="form-group">
                <label for="transferencia-nombre">Alias/Nombre del Cliente:</label>
                <input type="text" id="transferencia-nombre">
            </div>
            <div class="form-group">
                <label for="transferencia-combustible">Tipo de Combustible:</label>
                <select id="transferencia-combustible">
                    <option value="">Seleccionar combustible</option>
                    <option value="V-POWER DIESEL">V-POWER DIESEL</option>
                    <option value="V-POWER NAFTA">V-POWER NAFTA</option>
                    <option value="NAFTA SUPER">NAFTA SUPER</option>
                    <option value="FORMULA DIESEL">FORMULA DIESEL</option>
                </select>
            </div>
            <div class="form-group">
                <label for="transferencia-litro">Litro:</label>
                <input type="number" id="transferencia-litro" min="0">
            </div>
            <div class="form-group">
                <label for="transferencia-precio">Precio:</label>
                <input type="number" id="transferencia-precio" min="0">
            </div>
            <div class="form-group">
                <label>Fecha y Hora:</label>
                <span id="transferencia-fecha"></span>
            </div>
            <button id="add-transferencia-confirm" class="confirm-btn">Agregar</button>
        </div>
    </div>

    <!-- Modal para Configuración -->
    <div id="config-modal" class="modal">
        <div class="modal-content config-modal-content">
            <span class="close">×</span>
            <h2>Configuración</h2>
            <div class="config-warning">
                <p>¡Atención! Esta sección permite modificar precios y configuraciones del sistema.</p>
                <button id="enable-config-btn" class="warning-btn">Habilitar Configuración</button>
            </div>
            <div id="config-sections" class="config-sections" style="display: none;">
                <div class="config-section">
                    <h3><i class="fas fa-gas-pump"></i> Precios de Combustibles</h3>
                    <div class="config-form">
                        <div class="form-group">
                            <label for="config-vpower-diesel">V-POWER DIESEL:</label>
                            <input type="number" id="config-vpower-diesel" value="3000" min="0">
                        </div>
                        <div class="form-group">
                            <label for="config-vpower-nafta">V-POWER NAFTA:</label>
                            <input type="number" id="config-vpower-nafta" value="2500" min="0">
                        </div>
                        <div class="form-group">
                            <label for="config-nafta-super">NAFTA SUPER:</label>
                            <input type="number" id="config-nafta-super" value="1500" min="0">
                        </div>
                        <div class="form-group">
                            <label for="config-formula-diesel">FORMULA DIESEL:</label>
                            <input type="number" id="config-formula-diesel" value="2000" min="0">
                        </div>
                    </div>
                </div>

                <div class="config-section">
                    <h3><i class="fas fa-oil-can"></i> Precios de Aceites y Lubricantes</h3>
                    <div class="config-form" id="aceites-config-form">
                        <!-- Los campos se agregarán dinámicamente -->
                    </div>
                     <button id="add-aceite-config-btn" class="add-btn">Agregar Producto</button>
                </div>

                <div class="config-section">
                    <h3><i class="fas fa-users"></i> Gestión de Playeros</h3>
                    <div class="config-form">
                        <div class="playeros-list" id="playeros-list-config"> <!-- ID específico para config -->
                             <!-- Los playeros se cargarán aquí -->
                        </div>
                        <div class="form-group">
                            <label for="new-playero">Nuevo Playero:</label>
                            <input type="text" id="new-playero">
                            <button id="add-playero-btn" class="add-btn">Agregar</button>
                        </div>
                    </div>
                </div>

                <!-- MODIFICACIÓN 1: Nueva sección para Gestión de Clientes -->
                <div class="config-section">
                    <h3><i class="fas fa-address-book"></i> Gestión de Clientes (Vales)</h3>
                    <div class="config-form">
                        <div class="clientes-list" id="clientes-list-config">
                             <!-- Los clientes se cargarán aquí -->
                        </div>
                        <div class="form-group">
                            <label for="new-cliente">Nuevo Cliente:</label>
                            <input type="text" id="new-cliente">
                            <button id="add-cliente-btn" class="add-btn">Agregar</button>
                        </div>
                    </div>
                </div>
                <!-- Fin MODIFICACIÓN 1 -->


                <button id="save-config-btn" class="confirm-btn">Guardar Configuración</button>
            </div>
        </div>
    </div>

    <!-- Modal para Vista Previa de Impresión -->
    <div id="print-modal" class="modal">
        <div class="modal-content print-modal-content">
            <span class="close">×</span>
            <h2>Vista Previa de Impresión</h2>
            <div id="print-content" class="print-content">
                <!-- El contenido se generará dinámicamente -->
            </div>
            <div class="print-buttons">
                <button id="print-btn" class="confirm-btn">Imprimir</button>
            </div>
        </div>
    </div>

    <!-- <script src="script.js"></script> <-- Eliminado enlace externo -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {

            // ------------------------------------------------------------------------
            // Selectores Globales (añadir nuevos selectores aquí)
            // ------------------------------------------------------------------------
            const playeroSelect = document.getElementById('playero'); // El select principal
            const totalCombustiblesSpan = document.getElementById('total-combustibles');
            const totalCombustiblesResumenSpan = document.getElementById('total-combustibles-resumen');
            const efectivoInput = document.getElementById('efectivo');
            const totalCajaSpan = document.getElementById('total-caja');
            const diferenciaSpan = document.getElementById('diferencia');
            const calcularBtn = document.getElementById('calcular-btn');
            const borrarBtn = document.getElementById('borrar-btn');
            const registrarBtn = document.getElementById('registrar-btn');
            const fuelTables = document.querySelectorAll('.fuel-table');

            // Selectores Columnas Panel 3
            const addAceiteBtn = document.getElementById('add-aceite-btn');
            const removeAceiteBtn = document.getElementById('remove-aceite-btn');
            const aceitesList = document.getElementById('aceites-list');
            const totalAceitesSpan = document.getElementById('total-aceites');
            const addValeBtn = document.getElementById('add-vale-btn');
            const removeValeBtn = document.getElementById('remove-vale-btn');
            const valesList = document.getElementById('vales-list');
            const totalValesSpan = document.getElementById('total-vales');
            const addTarjetaBtn = document.getElementById('add-tarjeta-btn');
            const removeTarjetaBtn = document.getElementById('remove-tarjeta-btn');
            const tarjetasList = document.getElementById('tarjetas-list');
            const totalTarjetasSpan = document.getElementById('total-tarjetas');
            const addTransferenciaBtn = document.getElementById('add-transferencia-btn');
            const removeTransferenciaBtn = document.getElementById('remove-transferencia-btn');
            const transferenciasList = document.getElementById('transferencias-list');
            const totalTransferenciasSpan = document.getElementById('total-transferencias');

            // Selectores Modales y Botones
            const aceiteModal = document.getElementById('aceite-modal');
            const valeModal = document.getElementById('vale-modal');
            const tarjetaModal = document.getElementById('tarjeta-modal');
            const transferenciaModal = document.getElementById('transferencia-modal');
            const configModal = document.getElementById('config-modal');
            const printModal = document.getElementById('print-modal');
            const closeButtons = document.querySelectorAll('.close');
            const addAceiteConfirmBtn = document.getElementById('add-aceite-confirm');
            const addValeConfirmBtn = document.getElementById('add-vale-confirm');
            const addTarjetaConfirmBtn = document.getElementById('add-tarjeta-confirm');
            const addTransferenciaConfirmBtn = document.getElementById('add-transferencia-confirm');
            const imprimirBtn = document.getElementById('imprimir-btn'); // Botón en Panel 4
            const configBtn = document.getElementById('config-btn');
            const printButton = document.getElementById('print-btn'); // Botón en Modal Print
            const printContent = document.getElementById('print-content');

            // Selectores Inputs Modales
            const aceiteSelect = document.getElementById('aceite-select');
            const valeNombreSelect = document.getElementById('vale-nombre');
            const valeCombustibleSelect = document.getElementById('vale-combustible');
            const valeLitroInput = document.getElementById('vale-litro');
            const valePrecioInput = document.getElementById('vale-precio');
            const tarjetaMontoInput = document.getElementById('tarjeta-monto');
            const transferenciaNombreInput = document.getElementById('transferencia-nombre');
            const transferenciaCombustibleSelect = document.getElementById('transferencia-combustible');
            const transferenciaLitroInput = document.getElementById('transferencia-litro');
            const transferenciaPrecioInput = document.getElementById('transferencia-precio');
            const transferenciaFechaSpan = document.getElementById('transferencia-fecha');

            // Selectores Configuración
            const enableConfigBtn = document.getElementById('enable-config-btn');
            const configSections = document.getElementById('config-sections');
            const configFuelVPowerDiesel = document.getElementById('config-vpower-diesel');
            const configFuelVPowerNafta = document.getElementById('config-vpower-nafta');
            const configFuelNaftaSuper = document.getElementById('config-nafta-super');
            const configFuelFormulaDiesel = document.getElementById('config-formula-diesel');
            const aceitesConfigForm = document.getElementById('aceites-config-form');
            const addAceiteConfigBtn = document.getElementById('add-aceite-config-btn');
            const saveConfigBtn = document.getElementById('save-config-btn');
            const playerosListConfig = document.getElementById('playeros-list-config'); // Específico de config
            const newPlayeroInput = document.getElementById('new-playero');
            const addPlayeroBtn = document.getElementById('add-playero-btn');

            // MODIFICACIÓN 1: Selectores para Gestión de Clientes
            const clientesListConfig = document.getElementById('clientes-list-config'); // Lista en config
            const newClienteInput = document.getElementById('new-cliente');
            const addClienteBtn = document.getElementById('add-cliente-btn');

            // MODIFICACIÓN 2: Selector para Textarea de Notas
            const notasTextarea = document.getElementById('notas-textarea');

            // ------------------------------------------------------------------------
            // Datos Globales (Precios, Listas, etc.)
            // ------------------------------------------------------------------------
            let fuelPrices = {
                'V-POWER DIESEL': 3000,
                'V-POWER NAFTA': 2500,
                'NAFTA SUPER': 1500,
                'FORMULA DIESEL': 2000
            };
            let aceitesLubricantes = {
                'Helix HX5 15W40': 15000,
                'Rimula R4 15W40': 18000,
                'Grasa Litio EP2': 5000,
            };
            let playeros = ["Aarón", "Emanuel", "Fiorela", "Germán"]; // Array inicial
            let clientes = ["Cliente Ejemplo 1", "Cliente Ejemplo 2"]; // MODIFICACIÓN 1: Array inicial de clientes

            // Arrays para items de las columnas
            let aceitesItems = [];
            let valesItems = [];
            let tarjetasItems = [];
            let transferenciasItems = [];

            // ------------------------------------------------------------------------
            // PANEL 1: Información General
            // ------------------------------------------------------------------------
            function updateDateTime() {
                const now = new Date();
                const day = String(now.getDate()).padStart(2, '0');
                const month = String(now.getMonth() + 1).padStart(2, '0');
                const year = now.getFullYear();
                document.getElementById('current-date').textContent = `${day}/${month}/${year}`;
                const hours = String(now.getHours()).padStart(2, '0');
                const minutes = String(now.getMinutes()).padStart(2, '0');
                document.getElementById('current-time').textContent = `${hours}:${minutes}`;
                let shift = "";
                const currentHour = now.getHours();
                if (currentHour >= 6 && currentHour < 14) shift = "Mañana";
                else if (currentHour >= 14 && currentHour < 22) shift = "Tarde";
                else shift = "Noche";
                document.getElementById('current-shift').textContent = shift;
            }
            updateDateTime();
            setInterval(updateDateTime, 1000);

            // ------------------------------------------------------------------------
            // PANEL 2: Registro de Surtidores de Combustible
            // ------------------------------------------------------------------------
            function calcularTabla(table) {
                const rows = table.querySelectorAll('tbody tr');
                let totalTabla = 0;
                rows.forEach(row => {
                    const inicioInput = row.querySelector('.inicio');
                    const finalInput = row.querySelector('.final');
                    const litroInput = row.querySelector('.litro');
                    const precioUnitarioInput = row.querySelector('.precio-unitario');
                    const precioTotalInput = row.querySelector('.precio-total');
                    const fuelType = row.dataset.fuelType;
                    precioUnitarioInput.value = fuelPrices[fuelType] || 0;
                    const inicio = parseFloat(inicioInput.value) || 0;
                    const final = parseFloat(finalInput.value) || 0;
                    const precioUnitario = parseFloat(precioUnitarioInput.value) || 0;
                    let litros = 0;
                     if (final >= inicio) litros = final - inicio;
                    litroInput.value = litros.toFixed(2);
                    const precioTotal = litros * precioUnitario;
                    precioTotalInput.value = precioTotal.toFixed(2);
                    totalTabla += precioTotal;
                });
                return totalTabla;
            }

            function calcularTotalCombustibles() {
                let totalGlobal = 0;
                fuelTables.forEach(table => {
                    totalGlobal += calcularTabla(table);
                });
                const formattedTotal = '$' + totalGlobal.toFixed(2);
                totalCombustiblesSpan.textContent = formattedTotal;
                totalCombustiblesResumenSpan.textContent = formattedTotal;
                updateDiferencia(); // MODIFICACIÓN 3: Asegura que la diferencia se actualice
            }

            function borrarTabla(table) {
                const rows = table.querySelectorAll('tbody tr');
                rows.forEach(row => {
                    const inicioInput = row.querySelector('.inicio');
                    const finalInput = row.querySelector('.final');
                    const litroInput = row.querySelector('.litro');
                    const precioTotalInput = row.querySelector('.precio-total');
                    const valorFinal = finalInput.value;
                    finalInput.value = '';
                    litroInput.value = '';
                    precioTotalInput.value = '';
                    inicioInput.value = valorFinal;
                });
            }

            calcularBtn.addEventListener('click', calcularTotalCombustibles);

            borrarBtn.addEventListener('click', function() {
                if (confirm("¿Está seguro de que desea borrar los datos de los surtidores? El N° Final se moverá a N° Inicio.")) {
                    fuelTables.forEach(table => borrarTabla(table));
                    calcularTotalCombustibles();
                }
            });

            registrarBtn.addEventListener('click', function() {
                alert('Función de REGISTRAR no implementada aún. Aquí se guardarían los datos del cierre.');
                // Lógica futura...
            });

            fuelTables.forEach(table => {
                table.addEventListener('input', (event) => {
                    if (event.target.classList.contains('inicio') || event.target.classList.contains('final')) {
                        calcularTotalCombustibles();
                    }
                });
            });

            // ------------------------------------------------------------------------
            // PANEL 3: Registro de Caja (Items y Modales)
            // ------------------------------------------------------------------------
            function openModal(modal) { modal.style.display = 'block'; }

            function closeModal(modal) {
                modal.style.display = 'none';
                if (modal === aceiteModal) aceiteSelect.value = '';
                if (modal === valeModal) { valeNombreSelect.value = ''; valeCombustibleSelect.value = ''; valeLitroInput.value = ''; valePrecioInput.value = ''; }
                if (modal === tarjetaModal) tarjetaMontoInput.value = '';
                if (modal === transferenciaModal) { transferenciaNombreInput.value = ''; transferenciaCombustibleSelect.value = ''; transferenciaLitroInput.value = ''; transferenciaPrecioInput.value = ''; }
                if (modal === configModal) { configSections.style.display = 'none'; enableConfigBtn.style.display = 'block'; }
            }

            addAceiteBtn.addEventListener('click', () => { populateAceiteSelect(); openModal(aceiteModal); });
            addValeBtn.addEventListener('click', () => { renderClientes(); openModal(valeModal); }); // MODIFICACIÓN 1: Renderizar clientes al abrir modal de vales
            addTarjetaBtn.addEventListener('click', () => openModal(tarjetaModal));
            addTransferenciaBtn.addEventListener('click', () => { updateTransferenciaFecha(); openModal(transferenciaModal); });

            closeButtons.forEach(button => button.addEventListener('click', function() { closeModal(this.closest('.modal')); }));
            window.addEventListener('click', function(event) { if (event.target.classList.contains('modal')) closeModal(event.target); });

            function generateUniqueId() { return Date.now().toString(36) + Math.random().toString(36).substring(2, 7); }

            function createItemElement(text, value, id) {
                const item = document.createElement('div');
                item.classList.add('item');
                item.dataset.value = value; item.dataset.id = id;
                const itemDetails = document.createElement('div');
                itemDetails.classList.add('item-details'); itemDetails.textContent = text; itemDetails.title = text;
                const itemCheckbox = document.createElement('input');
                itemCheckbox.type = 'checkbox'; itemCheckbox.classList.add('item-checkbox'); itemCheckbox.value = id;
                item.appendChild(itemDetails); item.appendChild(itemCheckbox);
                return item;
            }

            function addItem(listElement, itemsArray, itemData, totalSpan) {
                const newItemElement = createItemElement(itemData.text, itemData.value, itemData.id);
                listElement.appendChild(newItemElement);
                itemsArray.push(itemData);
                updateTotal(itemsArray, totalSpan);
            }

            function removeSelectedItems(listElement, itemsArray, totalSpan) {
                const checkboxes = listElement.querySelectorAll('.item-checkbox:checked');
                const idsToRemove = Array.from(checkboxes).map(cb => cb.value);
                if (idsToRemove.length === 0) { alert("Seleccione al menos un item para quitar."); return itemsArray; } // Devolver original si no hay selección
                checkboxes.forEach(checkbox => checkbox.closest('.item').remove());
                const filteredArray = itemsArray.filter(item => !idsToRemove.includes(item.id)); // Crear nuevo array filtrado
                updateTotal(filteredArray, totalSpan);
                return filteredArray; // Devolver el nuevo array filtrado
            }


            function updateTotal(itemsArray, totalSpan) {
                let total = itemsArray.reduce((sum, item) => sum + parseFloat(item.value), 0);
                totalSpan.textContent = '$' + total.toFixed(2);
                updateTotalCaja(); // MODIFICACIÓN 3: Asegura que el total de caja se actualice
            }

            function updateTransferenciaFecha() {
                const now = new Date();
                const day = String(now.getDate()).padStart(2, '0');
                const month = String(now.getMonth() + 1).padStart(2, '0');
                const year = now.getFullYear();
                const hours = String(now.getHours()).padStart(2, '0');
                const minutes = String(now.getMinutes()).padStart(2, '0');
                transferenciaFechaSpan.textContent = `${day}/${month}/${year} ${hours}:${minutes}`;
            }

            function populateAceiteSelect() {
                aceiteSelect.innerHTML = '<option value="">Seleccionar producto...</option>';
                const sortedKeys = Object.keys(aceitesLubricantes).sort();
                for (const producto of sortedKeys) {
                    const precio = aceitesLubricantes[producto];
                    const option = document.createElement('option');
                    option.value = producto; option.dataset.price = precio;
                    option.textContent = `${producto} - $${precio.toFixed(2)}`;
                    aceiteSelect.appendChild(option);
                }
            }

            addAceiteConfirmBtn.addEventListener('click', function() {
                const selectedOption = aceiteSelect.options[aceiteSelect.selectedIndex];
                const nombreProducto = selectedOption.value;
                const precio = parseFloat(selectedOption.dataset.price);
                if (nombreProducto && !isNaN(precio)) {
                    const itemData = { id: generateUniqueId(), text: `${nombreProducto} - $${precio.toFixed(2)}`, value: precio };
                    addItem(aceitesList, aceitesItems, itemData, totalAceitesSpan);
                    closeModal(aceiteModal);
                } else alert('Por favor, seleccione un producto válido.');
            });

            addValeConfirmBtn.addEventListener('click', function() {
                const nombre = valeNombreSelect.value.trim();
                const combustible = valeCombustibleSelect.value;
                const litros = parseFloat(valeLitroInput.value) || 0;
                const precioManual = parseFloat(valePrecioInput.value) || 0;
                if (!nombre) { alert('Por favor, seleccione o ingrese un nombre de cliente.'); return; }
                if (!combustible && litros > 0 && precioManual === 0) { alert('Por favor, seleccione un tipo de combustible si ingresó litros.'); return; }
                if (litros <= 0 && precioManual <= 0) { alert('Por favor, ingrese Litros o un Precio para el vale/cheque.'); return; }
                let precioUnitario = fuelPrices[combustible] || 0;
                let totalValue = precioManual > 0 ? precioManual : litros * precioUnitario;
                let itemText = `${nombre}`;
                if (combustible) itemText += ` - ${combustible}`;
                if (litros > 0) itemText += ` - ${litros.toFixed(2)} L`;
                itemText += ` - $${totalValue.toFixed(2)}`;
                const itemData = { id: generateUniqueId(), text: itemText, value: totalValue };
                addItem(valesList, valesItems, itemData, totalValesSpan);
                closeModal(valeModal);
            });

            addTarjetaConfirmBtn.addEventListener('click', function() {
                const monto = parseFloat(tarjetaMontoInput.value) || 0;
                if (monto > 0) {
                    const itemData = { id: generateUniqueId(), text: `Venta Tarjeta - $${monto.toFixed(2)}`, value: monto };
                    addItem(tarjetasList, tarjetasItems, itemData, totalTarjetasSpan);
                    closeModal(tarjetaModal);
                } else alert('Por favor, ingrese un monto válido para la tarjeta.');
            });

            addTransferenciaConfirmBtn.addEventListener('click', function() {
                const nombre = transferenciaNombreInput.value.trim();
                const combustible = transferenciaCombustibleSelect.value;
                const litros = parseFloat(transferenciaLitroInput.value) || 0;
                const precioManual = parseFloat(transferenciaPrecioInput.value) || 0;
                if (!nombre) { alert('Por favor, ingrese un Alias/Nombre de Cliente.'); return; }
                if (!combustible && litros > 0 && precioManual === 0) { alert('Por favor, seleccione un tipo de combustible si ingresó litros.'); return; }
                if (litros <= 0 && precioManual <= 0) { alert('Por favor, ingrese Litros o un Precio.'); return; }
                let precioUnitario = fuelPrices[combustible] || 0;
                let totalValue = precioManual > 0 ? precioManual : litros * precioUnitario;
                let itemText = `${nombre}`;
                if (combustible) itemText += ` - ${combustible}`;
                if (litros > 0) itemText += ` - ${litros.toFixed(2)} L`;
                itemText += ` - $${totalValue.toFixed(2)}`;
                const itemData = { id: generateUniqueId(), text: itemText, value: totalValue };
                addItem(transferenciasList, transferenciasItems, itemData, totalTransferenciasSpan);
                closeModal(transferenciaModal);
            });

            // Eventos para quitar items (actualizados para reasignar el array filtrado)
            removeAceiteBtn.addEventListener('click', () => { aceitesItems = removeSelectedItems(aceitesList, aceitesItems, totalAceitesSpan); });
            removeValeBtn.addEventListener('click', () => { valesItems = removeSelectedItems(valesList, valesItems, totalValesSpan); });
            removeTarjetaBtn.addEventListener('click', () => { tarjetasItems = removeSelectedItems(tarjetasList, tarjetasItems, totalTarjetasSpan); });
            removeTransferenciaBtn.addEventListener('click', () => { transferenciasItems = removeSelectedItems(transferenciasList, transferenciasItems, totalTransferenciasSpan); });


            // ------------------------------------------------------------------------
            // PANEL 4: Total Caja, Resumen, Notas y Opciones
            // ------------------------------------------------------------------------
            function updateTotalCaja() {
                let efectivo = parseFloat(efectivoInput.value) || 0;
                // Sumar directamente desde los arrays de items
                let totalAceites = aceitesItems.reduce((sum, item) => sum + item.value, 0);
                let totalVales = valesItems.reduce((sum, item) => sum + item.value, 0);
                let totalTarjetas = tarjetasItems.reduce((sum, item) => sum + item.value, 0);
                let totalTransferencias = transferenciasItems.reduce((sum, item) => sum + item.value, 0);
                let totalCaja = efectivo + totalAceites + totalVales + totalTarjetas + totalTransferencias;
                totalCajaSpan.textContent = '$' + totalCaja.toFixed(2);
                updateDiferencia(); // MODIFICACIÓN 3: Asegura que la diferencia se actualice
            }

            function updateDiferencia() {
                let totalCombustibles = parseFloat(totalCombustiblesResumenSpan.textContent.replace('$', '')) || 0;
                let totalCaja = parseFloat(totalCajaSpan.textContent.replace('$', '')) || 0;
                let diferencia = totalCaja - totalCombustibles;
                diferenciaSpan.textContent = '$' + diferencia.toFixed(2);
                diferenciaSpan.removeAttribute('data-positive');
                diferenciaSpan.removeAttribute('data-negative');
                if (diferencia > 0) diferenciaSpan.setAttribute('data-positive', 'true');
                else if (diferencia < 0) diferenciaSpan.setAttribute('data-negative', 'true');
            }

            // MODIFICACIÓN 3: El input de efectivo ya dispara updateTotalCaja en su evento 'input'
            efectivoInput.addEventListener('input', updateTotalCaja);

            // --- CONFIGURACIÓN ---
            configBtn.addEventListener('click', () => {
                loadConfigIntoModal();
                configSections.style.display = 'none';
                enableConfigBtn.style.display = 'block';
                openModal(configModal);
            });

            enableConfigBtn.addEventListener('click', function() {
                const confirm1 = confirm('¿Está seguro de que desea habilitar la configuración? Los cambios pueden afectar los cálculos.');
                if (confirm1) {
                    const confirm2 = confirm('¡ÚLTIMA CONFIRMACIÓN! ¿Realmente desea modificar la configuración del sistema?');
                    if (confirm2) { configSections.style.display = 'block'; enableConfigBtn.style.display = 'none'; }
                }
            });

            function createAceiteConfigField(id, nombre = '', precio = 0) {
                const div = document.createElement('div');
                div.classList.add('form-group'); div.dataset.itemId = id;
                div.innerHTML = `
                    <label for="config-aceite-nombre-${id}">Nombre:</label>
                    <input type="text" id="config-aceite-nombre-${id}" class="config-aceite-nombre" value="${nombre}" placeholder="Nombre Producto">
                    <label for="config-aceite-precio-${id}">Precio:</label>
                    <input type="number" id="config-aceite-precio-${id}" class="config-aceite-precio" value="${precio}" min="0" step="0.01" placeholder="0.00">
                    <button type="button" class="remove-btn remove-aceite-config-btn" data-id="${id}" title="Quitar este producto">×</button>
                `;
                div.querySelector('.remove-aceite-config-btn').addEventListener('click', function() { div.remove(); });
                return div;
            }

            addAceiteConfigBtn.addEventListener('click', function() {
                const uniqueId = generateUniqueId();
                const newField = createAceiteConfigField(uniqueId);
                aceitesConfigForm.appendChild(newField);
            });

            function loadConfigIntoModal() {
                configFuelVPowerDiesel.value = fuelPrices['V-POWER DIESEL'];
                configFuelVPowerNafta.value = fuelPrices['V-POWER NAFTA'];
                configFuelNaftaSuper.value = fuelPrices['NAFTA SUPER'];
                configFuelFormulaDiesel.value = fuelPrices['FORMULA DIESEL'];
                aceitesConfigForm.innerHTML = '';
                for (const nombre in aceitesLubricantes) {
                    const id = generateUniqueId();
                    const precio = aceitesLubricantes[nombre];
                    const field = createAceiteConfigField(id, nombre, precio);
                    aceitesConfigForm.appendChild(field);
                }
                renderPlayeros(); // Asegurar que la lista de playeros esté actualizada en config
                renderClientes(); // MODIFICACIÓN 1: Asegurar lista de clientes actualizada
            }

            function saveAceitesConfigFromModal() {
                const newAceitesLubricantes = {};
                const aceiteConfigFields = aceitesConfigForm.querySelectorAll('.form-group');
                aceiteConfigFields.forEach(field => {
                    const nombreInput = field.querySelector('.config-aceite-nombre');
                    const precioInput = field.querySelector('.config-aceite-precio');
                    const nombre = nombreInput.value.trim();
                    const precio = parseFloat(precioInput.value) || 0;
                    if (nombre) newAceitesLubricantes[nombre] = precio;
                });
                aceitesLubricantes = newAceitesLubricantes;
            }

            saveConfigBtn.addEventListener('click', function() {
                const newVpowerDiesel = parseFloat(configFuelVPowerDiesel.value) || 0;
                const newVpowerNafta = parseFloat(configFuelVPowerNafta.value) || 0;
                const newNaftaSuper = parseFloat(configFuelNaftaSuper.value) || 0;
                const newFormulaDiesel = parseFloat(configFuelFormulaDiesel.value) || 0;
                if (newVpowerDiesel < 0 || newVpowerNafta < 0 || newNaftaSuper < 0 || newFormulaDiesel < 0) { alert("Los precios de los combustibles no pueden ser negativos."); return; }
                fuelPrices['V-POWER DIESEL'] = newVpowerDiesel;
                fuelPrices['V-POWER NAFTA'] = newVpowerNafta;
                fuelPrices['NAFTA SUPER'] = newNaftaSuper;
                fuelPrices['FORMULA DIESEL'] = newFormulaDiesel;
                saveAceitesConfigFromModal();
                // Playeros y Clientes se guardan implícitamente al modificar los arrays
                alert("Configuración guardada exitosamente.");
                populateAceiteSelect();
                renderPlayeros(); // Actualizar select principal de playeros
                renderClientes(); // MODIFICACIÓN 1: Actualizar select de nombres en Vales
                calcularTotalCombustibles();
                closeModal(configModal);
            });

            // --- Gestión de Playeros ---
            function renderPlayeros() {
                playerosListConfig.innerHTML = ''; // Limpiar lista en config
                playeroSelect.innerHTML = '<option value="">Seleccionar playero</option>'; // Limpiar select principal
                playeros.sort();
                playeros.forEach(nombre => {
                    const option = document.createElement('option');
                    option.value = nombre; option.textContent = nombre;
                    playeroSelect.appendChild(option); // Añadir al select principal
                    const playeroItem = document.createElement('div');
                    playeroItem.classList.add('playero-item'); // Asumiendo clase CSS existente
                    playeroItem.innerHTML = `<span>${nombre}</span><button type="button" class="remove-btn remove-playero-btn" data-playero="${nombre}" title="Quitar a ${nombre}">×</button>`;
                    playerosListConfig.appendChild(playeroItem); // Añadir a la lista en config
                });
            }

            addPlayeroBtn.addEventListener('click', function() {
                const newPlayeroName = newPlayeroInput.value.trim();
                if (newPlayeroName && !playeros.includes(newPlayeroName)) {
                    playeros.push(newPlayeroName);
                    newPlayeroInput.value = ''; renderPlayeros();
                } else if (playeros.includes(newPlayeroName)) alert(`El playero "${newPlayeroName}" ya existe.`);
                else alert("Ingrese un nombre válido para el playero.");
            });

            playerosListConfig.addEventListener('click', function(event) {
                if (event.target.classList.contains('remove-playero-btn')) {
                    const playeroToRemove = event.target.dataset.playero;
                    if (confirm(`¿Está seguro de que desea eliminar a "${playeroToRemove}"?`)) {
                        playeros = playeros.filter(p => p !== playeroToRemove); renderPlayeros();
                    }
                }
            });

            // --- MODIFICACIÓN 1: Gestión de Clientes ---
            function renderClientes() {
                clientesListConfig.innerHTML = ''; // Limpiar lista en config
                valeNombreSelect.innerHTML = '<option value="">Seleccionar nombre</option>'; // Limpiar select en modal Vales
                clientes.sort();
                clientes.forEach(nombre => {
                    // Añadir al select del modal de Vales
                    const option = document.createElement('option');
                    option.value = nombre; option.textContent = nombre;
                    valeNombreSelect.appendChild(option);

                    // Añadir a la lista visual en config
                    const clienteItem = document.createElement('div');
                    clienteItem.classList.add('cliente-item'); // Crear clase CSS si no existe, similar a playero-item
                    clienteItem.innerHTML = `<span>${nombre}</span><button type="button" class="remove-btn remove-cliente-btn" data-cliente="${nombre}" title="Quitar a ${nombre}">×</button>`;
                    clientesListConfig.appendChild(clienteItem);
                });
            }

            addClienteBtn.addEventListener('click', function() {
                const newClienteName = newClienteInput.value.trim();
                if (newClienteName && !clientes.includes(newClienteName)) {
                    clientes.push(newClienteName);
                    newClienteInput.value = '';
                    renderClientes(); // Actualizar listas
                } else if (clientes.includes(newClienteName)) {
                    alert(`El cliente "${newClienteName}" ya existe.`);
                } else {
                    alert("Ingrese un nombre válido para el cliente.");
                }
            });

            clientesListConfig.addEventListener('click', function(event) {
                if (event.target.classList.contains('remove-cliente-btn')) {
                    const clienteToRemove = event.target.dataset.cliente;
                    if (confirm(`¿Está seguro de que desea eliminar al cliente "${clienteToRemove}"?`)) {
                        clientes = clientes.filter(c => c !== clienteToRemove);
                        renderClientes(); // Actualizar listas
                    }
                }
            });
            // --- Fin MODIFICACIÓN 1 ---

            // --- IMPRESIÓN ---
            imprimirBtn.addEventListener('click', function() {
                calcularTotalCombustibles(); // Recalcular por si acaso
                updateTotalCaja();          // Recalcular por si acaso

                const playero = playeroSelect.value || 'No especificado';
                const fecha = document.getElementById('current-date').textContent;
                const hora = document.getElementById('current-time').textContent;
                const turno = document.getElementById('current-shift').textContent;
                // MODIFICACIÓN 2: Obtener el texto de las notas
                const notas = notasTextarea.value;

                let printContentHTML = `
                    <style>
                        /* Estilos embebidos (sin cambios respecto a tu versión anterior) */
                        .print-container { font-family: Arial, sans-serif; font-size: 9pt; color: #000; width: 100%; }
                        .print-container h1 { font-size: 14pt; text-align: center; margin: 0 0 5px 0; }
                        .print-header { display: flex; justify-content: space-between; margin-bottom: 10px; padding-bottom: 5px; border-bottom: 1px solid #ccc; font-size: 8.5pt; flex-wrap: wrap;}
                        .print-header span { display: block; margin-right: 10px; margin-bottom: 2px;}
                        .print-summary { display: flex; justify-content: space-between; margin-top: 15px; padding-top: 5px; border-top: 1px solid #000; font-size: 9.5pt; font-weight: bold; flex-wrap: wrap; }
                        .print-summary span { display: block; margin-right: 15px; margin-bottom: 3px;}
                        .print-section { margin-bottom: 10px; }
                        .print-section h2 { font-size: 11pt; margin: 8px 0 3px 0; padding-bottom: 2px; border-bottom: 1px solid #eee; display: flex; align-items: center; gap: 5px; }
                        .print-section h2 i { font-size: 10pt; }
                        .print-table { width: 100%; border-collapse: collapse; margin-top: 3px; table-layout: fixed; }
                        .print-table th, .print-table td { border: 1px solid #ccc; padding: 2px 4px; font-size: 7.5pt; text-align: left; word-wrap: break-word; }
                        .print-table th { background-color: #f2f2f2 !important; font-weight: bold; }
                        .print-table td.number { text-align: right; }
                        .print-table .fuel-col { width: 28%; }
                        .print-table .num-col-short { width: 12%; }
                        .print-table .num-col-med { width: 15%; }
                        .print-table .num-col-large { width: 16%; }
                        .print-list { margin: 0 0 5px 0; padding: 0; list-style: none; }
                        .print-list h3 { font-size: 9pt; margin: 5px 0 2px 0; font-weight: bold; }
                        .print-list li { display: flex; justify-content: space-between; font-size: 8pt; margin-bottom: 1px; padding: 1px 0; border-bottom: 1px dotted #eee; }
                        .print-list li span:first-child { padding-right: 5px; }
                        .print-list li span:last-child { text-align: right; font-weight: normal; }
                        .print-total { text-align: right; font-weight: bold; font-size: 9pt; margin-top: 3px; }
                        .print-subtotal { text-align: right; font-weight: normal; font-size: 8pt; margin-top: 2px; }
                        .print-notes { margin-top: 15px; }
                        .print-notes h2 { margin-bottom: 2px; }
                        /* MODIFICACIÓN 2: Estilo para el contenido de las notas */
                        .print-notes-content {
                            font-size: 8pt;
                            white-space: pre-wrap; /* Conservar saltos de línea y espacios */
                            word-wrap: break-word; /* Romper palabras largas */
                            padding: 5px;
                            border: 1px solid #eee;
                            background-color: #fdfdfd;
                            min-height: 40px; /* Altura mínima */
                        }
                        .print-footer { text-align: center; font-size: 7pt; margin-top: 15px; color: #666; }
                    </style>

                    <div class="print-container">
                        <h1>Cierre de Caja - Gasolinera</h1>
                        <div class="print-header">
                            <span><strong>Fecha:</strong> ${fecha}</span>
                            <span><strong>Hora:</strong> ${hora}</span>
                            <span><strong>Turno:</strong> ${turno}</span>
                            <span><strong>Playero:</strong> ${playero}</span>
                        </div>

                        <div class="print-section">
                            <h2><i class="fas fa-oil-can"></i> Combustibles</h2>
                            <table class="print-table">
                                <thead>
                                   <tr>
                                        <th class="fuel-col">Pico/Tipo</th>
                                        <th class="num-col-med">Inicio</th>
                                        <th class="num-col-med">Final</th>
                                        <th class="num-col-short">Litros</th>
                                        <th class="num-col-short">P.Unit</th>
                                        <th class="num-col-large">P.Total</th>
                                    </tr>
                                </thead>
                                <tbody>`;
                let combustibleRowsHTML = '';
                fuelTables.forEach((table, index) => {
                    const picoLabel = table.parentElement.querySelector('h3').textContent.split(' ')[2];
                    const rows = table.querySelectorAll('tbody tr');
                    rows.forEach(row => {
                        const combustible = row.querySelector('td:first-child').textContent;
                        const inicio = row.querySelector('.inicio').value || '0';
                        const final = row.querySelector('.final').value || '0';
                        const litro = parseFloat(row.querySelector('.litro').value || '0');
                        const precioU = parseFloat(row.querySelector('.precio-unitario').value || '0');
                        const precioT = parseFloat(row.querySelector('.precio-total').value || '0');
                        if (litro > 0) {
                             combustibleRowsHTML += `<tr><td class="fuel-col">${picoLabel}/${combustible}</td><td class="number num-col-med">${inicio}</td><td class="number num-col-med">${final}</td><td class="number num-col-short">${litro.toFixed(2)}</td><td class="number num-col-short">$${precioU.toFixed(2)}</td><td class="number num-col-large"><strong>$${precioT.toFixed(2)}</strong></td></tr>`;
                        }
                    });
                });
                if (!combustibleRowsHTML) combustibleRowsHTML = '<tr><td colspan="6" style="text-align:center; font-style:italic;">Sin ventas de combustible</td></tr>';
                printContentHTML += combustibleRowsHTML;
                printContentHTML += `
                                </tbody>
                            </table>
                            <p class="print-total">Total Combustibles: ${totalCombustiblesResumenSpan.textContent}</p>
                        </div>

                        <div class="print-section print-list">
                            <h2><i class="fas fa-cash-register"></i> Caja</h2>
                            <ul><li><span>Efectivo Declarado:</span> <span>${'$' + (parseFloat(efectivoInput.value) || 0).toFixed(2)}</span></li></ul>`;
                if (aceitesItems.length > 0) {
                    printContentHTML += `<h3>Aceites y Lubricantes:</h3><ul>`;
                    aceitesItems.forEach(item => { const match = item.text.match(/(.*) - \$([\d.]+)/); const nombre = match ? match[1] : item.text; printContentHTML += `<li><span>- ${nombre}</span> <span>$${item.value.toFixed(2)}</span></li>`; });
                    printContentHTML += `</ul><p class="print-subtotal">Subtotal: ${totalAceitesSpan.textContent}</p>`;
                }
                if (valesItems.length > 0) {
                    printContentHTML += `<h3>Vales y Cheques:</h3><ul>`;
                    valesItems.forEach(item => { const parts = item.text.split(' - '); let displayText = parts[0]; if (parts.length > 2) { displayText += ` (${parts[1]}`; if (parts[2].includes('L')) displayText += `, ${parts[2]}`; displayText += `)`; } printContentHTML += `<li><span>- ${displayText}</span> <span>$${item.value.toFixed(2)}</span></li>`; });
                    printContentHTML += `</ul><p class="print-subtotal">Subtotal: ${totalValesSpan.textContent}</p>`;
                }
                if (tarjetasItems.length > 0) {
                    printContentHTML += `<h3>Tarjetas:</h3><ul>`;
                    tarjetasItems.forEach(item => { printContentHTML += `<li><span>- Venta Tarjeta</span> <span>$${item.value.toFixed(2)}</span></li>`; });
                    printContentHTML += `</ul><p class="print-subtotal">Subtotal: ${totalTarjetasSpan.textContent}</p>`;
                }
                if (transferenciasItems.length > 0) {
                    printContentHTML += `<h3>Transf./Fiado/Otros:</h3><ul>`;
                    transferenciasItems.forEach(item => { const parts = item.text.split(' - '); let displayText = parts[0]; if (parts.length > 2) { displayText += ` (${parts[1]}`; if (parts[2].includes('L')) displayText += `, ${parts[2]}`; displayText += `)`; } printContentHTML += `<li><span>- ${displayText}</span> <span>$${item.value.toFixed(2)}</span></li>`; });
                    printContentHTML += `</ul><p class="print-subtotal">Subtotal: ${totalTransferenciasSpan.textContent}</p>`;
                }
                printContentHTML += `
                        </div> <!-- Fin print-section Caja -->

                        <div class="print-summary">
                            <span>TOTAL COMBUSTIBLES: ${totalCombustiblesResumenSpan.textContent}</span>
                            <span>TOTAL CAJA: ${totalCajaSpan.textContent}</span>
                            <span>DIFERENCIA: ${diferenciaSpan.textContent}</span>
                        </div>

                        <!-- MODIFICACIÓN 2: Mostrar contenido de las notas -->
                        <div class="print-notes">
                            <h2><i class="fas fa-pencil-alt"></i> Notas:</h2>
                            <div class="print-notes-content">${notas ? notas.replace(/\n/g, '<br>') : '<em>Sin notas.</em>'}</div>
                        </div>
                        <!-- Fin MODIFICACIÓN 2 -->


                        <div class="print-footer">
                            Sistema de Gestión - Gasolinera - ${fecha} ${hora}
                        </div>
                    </div> <!-- Fin print-container -->
                `;

                printContent.innerHTML = printContentHTML;
                openModal(printModal);
            });

            printButton.addEventListener('click', function() {
                printButton.style.display = 'none';
                const closeBtnInPrintModal = printModal.querySelector('.close');
                if(closeBtnInPrintModal) closeBtnInPrintModal.style.display = 'none';
                window.print();
                setTimeout(() => {
                     printButton.style.display = 'inline-flex';
                     if(closeBtnInPrintModal) closeBtnInPrintModal.style.display = 'block';
                     closeModal(printModal);
                }, 500);
            });

            // --- INICIALIZACIÓN AL CARGAR ---
            calcularTotalCombustibles();
            updateTotalCaja(); // Calcula total caja inicial (ya incluye updateDiferencia)
            renderPlayeros(); // Inicializar lista y select de playeros
            renderClientes(); // MODIFICACIÓN 1: Inicializar lista y select de clientes

        }); // Fin de DOMContentLoaded
    </script>
</body>
</html>
